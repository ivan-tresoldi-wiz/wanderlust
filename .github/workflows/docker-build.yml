name: Build Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    name: 'Docker Image Build - Scan - Push'
    runs-on: ubuntu-latest
    env:
      SCAN_PATH: "." # Set the relative path in the repo to build the image from
      IMAGE: "itresoldi/wanderlust"
      TAG: "latest" # Set the tag to use for the image
      POLICY_VULN: "ivan-tresoldi-vulnerabilities"
      POLICY_IAC: "ivan-tresoldi-IaC-misconfigurations"
    
    defaults:
      run:
        shell: bash
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Download Wiz CLI
      run: curl -o wizcli https://downloads.wiz.io/wizcli/latest/wizcli-linux-amd64 && chmod +x wizcli

    - name: Authenticate to Wiz
      run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
      env:
        WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
        WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

    - name: Run wiz CLI IaC scan
      run: ./wizcli iac scan --path $SCAN_PATH --policy "$POLICY_IAC"
  
    - name: Build Docker Image
      run: cd $SCAN_PATH && docker build . --tag $IMAGE:$TAG

    - name: Run wiz-cli docker image scan
      run: ./wizcli docker scan --image $IMAGE:$TAG --policy "$POLICY_VULN"
    
    - name: Push Docker Image
      run: docker push $IMAGE:$TAG

    - name: Tag Image for Wiz Image Trust
      run: ./wizcli docker tag --image $IMAGE:$TAG

    name: Build and Push to ECR

on:
  push:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: your-aws-region

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: your-ecr-repo-name
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Build, tag, and push MySQL image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: your-mysql-ecr-repo-name
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.mysql .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG